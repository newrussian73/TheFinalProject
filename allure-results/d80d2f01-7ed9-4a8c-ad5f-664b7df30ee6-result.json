{"name": "test_quest_should_consist_word", "status": "broken", "statusDetails": {"message": "ValueError: browser did not yield a value", "trace": "cls = <class '_pytest.runner.CallInfo'>\nfunc = <function call_runtest_hook.<locals>.<lambda> at 0x00000223B95B9EA0>\nwhen = 'setup'\nreraise = (<class '_pytest.outcomes.Exit'>, <class 'KeyboardInterrupt'>)\n\n    @classmethod\n    def from_call(\n        cls,\n        func: \"Callable[[], TResult]\",\n        when: \"Literal['collect', 'setup', 'call', 'teardown']\",\n        reraise: Optional[\n            Union[Type[BaseException], Tuple[Type[BaseException], ...]]\n        ] = None,\n    ) -> \"CallInfo[TResult]\":\n        \"\"\"Call func, wrapping the result in a CallInfo.\n    \n        :param func:\n            The function to call. Called without arguments.\n        :param when:\n            The phase in which the function is called.\n        :param reraise:\n            Exception or exceptions that shall propagate if raised by the\n            function, instead of being wrapped in the CallInfo.\n        \"\"\"\n        excinfo = None\n        start = timing.time()\n        precise_start = timing.perf_counter()\n        try:\n>           result: Optional[TResult] = func()\n\n..\\venv\\lib\\site-packages\\_pytest\\runner.py:341: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\venv\\lib\\site-packages\\_pytest\\runner.py:262: in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n..\\venv\\lib\\site-packages\\pluggy\\_hooks.py:265: in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n..\\venv\\lib\\site-packages\\pluggy\\_manager.py:80: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n..\\venv\\lib\\site-packages\\_pytest\\runner.py:157: in pytest_runtest_setup\n    item.session._setupstate.setup(item)\n..\\venv\\lib\\site-packages\\_pytest\\runner.py:497: in setup\n    raise exc\n..\\venv\\lib\\site-packages\\_pytest\\runner.py:494: in setup\n    col.setup()\n..\\venv\\lib\\site-packages\\_pytest\\python.py:1802: in setup\n    self._request._fillfixtures()\n..\\venv\\lib\\site-packages\\_pytest\\fixtures.py:551: in _fillfixtures\n    item.funcargs[argname] = self.getfixturevalue(argname)\n..\\venv\\lib\\site-packages\\_pytest\\fixtures.py:570: in getfixturevalue\n    fixturedef = self._get_active_fixturedef(argname)\n..\\venv\\lib\\site-packages\\_pytest\\fixtures.py:592: in _get_active_fixturedef\n    self._compute_fixture_value(fixturedef)\n..\\venv\\lib\\site-packages\\_pytest\\fixtures.py:678: in _compute_fixture_value\n    fixturedef.execute(request=subrequest)\n..\\venv\\lib\\site-packages\\_pytest\\fixtures.py:1076: in execute\n    result = ihook.pytest_fixture_setup(fixturedef=self, request=request)\n..\\venv\\lib\\site-packages\\pluggy\\_hooks.py:265: in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n..\\venv\\lib\\site-packages\\pluggy\\_manager.py:80: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n..\\venv\\lib\\site-packages\\_pytest\\fixtures.py:1130: in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfixturefunc = <function browser at 0x00000223B91412D0>\nrequest = <SubRequest 'browser' for <Function test_quest_should_consist_word>>\nkwargs = {'request': <SubRequest 'browser' for <Function test_quest_should_consist_word>>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n>               raise ValueError(f\"{request.fixturename} did not yield a value\") from None\nE               ValueError: browser did not yield a value\n\n..\\venv\\lib\\site-packages\\_pytest\\fixtures.py:904: ValueError"}, "start": 1681546470469, "stop": 1681546470469, "uuid": "5214f558-066d-4ade-8b3b-6f7adf79d5e0", "historyId": "6f137f2659085720930791b6efe83a0c", "testCaseId": "350a303ce3718e86cc654ed2b48525a6", "fullName": "tests.test_login_page#test_quest_should_consist_word", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_login_page"}, {"name": "host", "value": "DESKTOP-M21EPSG"}, {"name": "thread", "value": "12820-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_login_page"}]}